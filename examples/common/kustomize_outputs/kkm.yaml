apiVersion: v1
data:
  entrypoint.sh: |-
    #!/usr/bin/env bash

    set -x
    set -euo pipefail

    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"
    CONTAINERD_CFG_DIR="${CONTAINERD_CFG_DIR:-/etc/containerd}"

    source /scripts-lib/kontain_install_lib.sh

    echo "Install Kontain Runtime Artifacts (KM & KRUN)"
    install_kontain_artifacts

    echo "Add Kontain Runtime to containerd configuration"
    # check to see if its a normal k8s distribution or k3s
    if [ ! -f /root/var/lib/rancher/k3s/agent ]; then
      echo " its a regular k8s install"
      CONTAINERD_CFG_DIR="${CONTAINERD_CFG_DIR:-/etc/containerd}"
      containerd_conf_file="/etc/containerd/config.toml"
    else
      echo " its a k3s install"
      # else its a k3s containerd install
      CONTAINERD_CFG_DIR="${K3S_CONTAINERD_DIR:/root/var/lib/rancher/k3s/agent/etc/containerd}"
      cp "$CONTAINERD_CFG_DIR/config.toml" "$CONTAINERD_CFG_DIR/config.toml.tmpl"
      containerd_conf_file="$CONTAINERD_CFG_DIR/config.toml.tmpl"
    fi

    runtime="krun"
    configuration="configuration"
    pluginid=cri
    if grep -q "version = 2\>" $containerd_conf_file; then
      pluginid=\"io.containerd.grpc.v1.cri\"
    fi

    runtime_table="plugins.${pluginid}.containerd.runtimes.$runtime"
    runtime_type="io.containerd.$runtime.v2"
    options_table="$runtime_table.options"
    config_path=""
    if grep -q "\[$runtime_table\]" $containerd_conf_file; then
        echo "Configuration exists for $runtime_table, overwriting"
        sed -i "/\[$runtime_table\]/,+1s#runtime_type.*#runtime_type = \"${runtime_type}\"#" $containerd_conf_file
    else
        cat <<-EOT | tee -a $containerd_conf_file
          [$runtime_table]
          runtime_type = "${runtime_type}"
          privileged_without_host_devices = true
          pod_annotations = ["app.kontain.*"]
    EOT
    fi

    [ -c /root/dev/kvm ] && chmod 666 /root/dev/kvm

    echo "restart containerd"
    systemctl daemon-reload
    systemctl restart containerd

    sleep infinity
kind: ConfigMap
metadata:
  labels:
    app: kontain-init
  name: kontain-install-entrypoint
  namespace: kube-system
---
apiVersion: v1
data:
  kontain_install_lib.sh: |-
    #!/usr/bin/env bash

    # This will get overridden be ENV definition in kontain-deploy.yaml
    KONTAIN_RELEASE_URL="${KONTAIN_RELEASE_URL:-https://github.com/kontainapp/km/releases/download/v0.9.5/kontain_bin.tar.gz}"

    # we use chroot here because the host is rooted at /root
    # and kkm install looks for sudo and dkms in locations on the host
    function install_kontain_artifacts() {

      ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"

      # check to see if deltarpm is installed and if not install it (for Amzn Linux 2)
      yum -q list installed deltarpm &>/dev/null && echo "deltarpm already installed" || (echo "Not installed"; yum install -y deltarpm)

      echo "Install Kontain Runtime Artifacts (KM & KRUN)"

      mkdir -p ${ROOT_MOUNT_DIR}/kontain-artifacts
      curl -L "${KONTAIN_RELEASE_URL}" | tar -xzf - -C ${ROOT_MOUNT_DIR}/kontain-artifacts

      mkdir -p ${ROOT_MOUNT_DIR}/opt/kontain/bin

      cp ${ROOT_MOUNT_DIR}/kontain-artifacts/km/km ${ROOT_MOUNT_DIR}/opt/kontain/bin/km
      chmod +x ${ROOT_MOUNT_DIR}/opt/kontain/bin/km

      cp ${ROOT_MOUNT_DIR}/kontain-artifacts/container-runtime/krun ${ROOT_MOUNT_DIR}/opt/kontain/bin/krun
      chmod +x ${ROOT_MOUNT_DIR}/opt/kontain/bin/krun

      mkdir -p ${ROOT_MOUNT_DIR}/opt/kontain/shim
      cp ${ROOT_MOUNT_DIR}/kontain-artifacts/cloud/k8s/deploy/shim/containerd-shim-krun-v2 ${ROOT_MOUNT_DIR}/opt/kontain/shim/containerd-shim-krun-v2
      chmod +x ${ROOT_MOUNT_DIR}/opt/kontain/shim/containerd-shim-krun-v2
      chroot ${ROOT_MOUNT_DIR} ln -sf /opt/kontain/shim/containerd-shim-krun-v2 /usr/bin/containerd-shim-krun-v2

      chmod +x ${ROOT_MOUNT_DIR}/kontain-artifacts/kkm.run
      chroot ${ROOT_MOUNT_DIR}   /kontain-artifacts/kkm.run -- --force-install
    }
kind: ConfigMap
metadata:
  labels:
    app: kontain-init
  name: kontain-install-lib
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: kontain-init
  name: kontain-node-initializer
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: kontain-init
  template:
    metadata:
      labels:
        app: kontain-init
        name: kontain-node-initializer
    spec:
      containers:
      - command:
        - /scripts/entrypoint.sh
        env:
        - name: ROOT_MOUNT_DIR
          value: /root
        - name: CONTAINERD_CFG_DIR
          value: /etc/containerd
        - name: KONTAIN_RELEASE_URL
          value: https://github.com/kontainapp/km/releases/download/v0.9.8/kontain_bin.tar.gz
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: centos:7
        name: node-initializer
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /root
          name: root-mount
        - mountPath: /scripts-lib
          name: lib-entrypoint
        - mountPath: /scripts
          name: entrypoint
        - mountPath: /etc/crio/
          name: crio-conf
        - mountPath: /etc/containerd/
          name: containerd-conf
        - mountPath: /var/run/dbus
          name: dbus
        - mountPath: /run/systemd
          name: systemd
      volumes:
      - hostPath:
          path: /
        name: root-mount
      - configMap:
          defaultMode: 484
          name: kontain-install-entrypoint
        name: entrypoint
      - configMap:
          defaultMode: 484
          name: kontain-install-lib
        name: lib-entrypoint
      - hostPath:
          path: /etc/crio/
        name: crio-conf
      - hostPath:
          path: /etc/containerd/
        name: containerd-conf
      - hostPath:
          path: /var/run/dbus
        name: dbus
      - hostPath:
          path: /run/systemd
        name: systemd
  updateStrategy:
    type: RollingUpdate
---
apiVersion: node.k8s.io/v1
handler: krun
kind: RuntimeClass
metadata:
  name: kontain
