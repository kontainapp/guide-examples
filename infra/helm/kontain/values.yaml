# default = km, other values are "kkm", "km-crio", "k3s"
install_type: km

km_install_config:
  kontain_install_entrypoint: |-
      #!/usr/bin/env bash

      set -x
      set -euo pipefail

      ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"
      CONTAINERD_CFG_DIR="${CONTAINERD_CFG_DIR:-/etc/containerd}"

      source /scripts-lib/kontain_install_lib.sh

      echo "Install Kontain Runtime Artifacts (KM & KRUN)"
      install_kontain_artifacts

      echo "Add Kontain Runtime to containerd configuration"
      # check to see if its a normal k8s distribution or k3s
      if [ ! -f /root/var/lib/rancher/k3s/agent ]; then
        echo " its a regular k8s install"
        CONTAINERD_CFG_DIR="${CONTAINERD_CFG_DIR:-/etc/containerd}"
        containerd_conf_file="/etc/containerd/config.toml"
      else
        echo " its a k3s install"
        # else its a k3s containerd install
        CONTAINERD_CFG_DIR="${K3S_CONTAINERD_DIR:/root/var/lib/rancher/k3s/agent/etc/containerd}"
        cp "$CONTAINERD_CFG_DIR/config.toml" "$CONTAINERD_CFG_DIR/config.toml.tmpl"
        containerd_conf_file="$CONTAINERD_CFG_DIR/config.toml.tmpl"
      fi

      runtime="krun"
      configuration="configuration"
      pluginid=cri
      if grep -q "version = 2\>" $containerd_conf_file; then
        pluginid=\"io.containerd.grpc.v1.cri\"
      fi

      runtime_table="plugins.${pluginid}.containerd.runtimes.$runtime"
      runtime_type="io.containerd.$runtime.v2"
      options_table="$runtime_table.options"
      config_path=""
      if grep -q "\[$runtime_table\]" $containerd_conf_file; then
          echo "Configuration exists for $runtime_table, overwriting"
          sed -i "/\[$runtime_table\]/,+1s#runtime_type.*#runtime_type = \"${runtime_type}\"#" $containerd_conf_file
      else
          cat <<-EOT | tee -a $containerd_conf_file
            [$runtime_table]
            runtime_type = "${runtime_type}"
            privileged_without_host_devices = true
            pod_annotations = ["app.kontain.*"]
      EOT
      fi

      [ -c /root/dev/kvm ] && chmod 666 /root/dev/kvm

      echo "restart containerd"
      systemctl daemon-reload
      systemctl restart containerd

      sleep infinity

  kontain_install_lib: |-
      #!/usr/bin/env bash

      # This will get overridden be ENV definition in kontain-deploy.yaml
      TAG=${1:-$(curl -L -s https://raw.githubusercontent.com/kontainapp/km/current/km-releases/current_release.txt)}
      KONTAIN_RELEASE_URL="https://github.com/kontainapp/km/releases/download/${TAG}/kontain_bin.tar.gz"

      function install_kontain_artifacts() {
        echo "Install Kontain Runtime Artifacts (KM & KRUN)"
        mkdir /kontain-artifacts
        curl -L "${KONTAIN_RELEASE_URL}" | tar -xzf - -C /kontain-artifacts
        mkdir -p /root/opt/kontain/bin
        cp /kontain-artifacts/km/km /root/opt/kontain/bin/km
        chmod +x /root/opt/kontain/bin/km
        cp /kontain-artifacts/container-runtime/krun /root/opt/kontain/bin/krun
        chmod +x /root/opt/kontain/bin/krun
        mkdir -p /root/opt/kontain/shim
        cp /kontain-artifacts/cloud/k8s/deploy/shim/containerd-shim-krun-v2 /root/opt/kontain/shim/containerd-shim-krun-v2
        chmod +x /root/opt/kontain/shim/containerd-shim-krun-v2
        cp /kontain-artifacts/cloud/k8s/deploy/shim/containerd-shim-krun-v2 /root/usr/local/bin/containerd-shim-krun-v2
        chmod +x /root/usr/local/bin/containerd-shim-krun-v2
      }


kkm_install_config:
  kontain_install_lib: |-
    #!/usr/bin/env bash

    # This will get overridden be ENV definition in kontain-deploy.yaml
    KONTAIN_RELEASE_URL="${KONTAIN_RELEASE_URL:-https://github.com/kontainapp/km/releases/download/current/kontain_bin.tar.gz}"

    # we use chroot here because the host is rooted at /root
    # and kkm install looks for sudo and dkms in locations on the host
    function install_kontain_artifacts() {

      ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"

      # check to see if deltarpm is installed and if not install it (for Amzn Linux 2)
      yum -q list installed deltarpm &>/dev/null && echo "deltarpm already installed" || (echo "Not installed"; yum install -y deltarpm)

      echo "Install Kontain Runtime Artifacts (KM & KRUN)"

      mkdir -p ${ROOT_MOUNT_DIR}/kontain-artifacts
      curl -L "${KONTAIN_RELEASE_URL}" | tar -xzf - -C ${ROOT_MOUNT_DIR}/kontain-artifacts

      mkdir -p ${ROOT_MOUNT_DIR}/opt/kontain/bin

      cp ${ROOT_MOUNT_DIR}/kontain-artifacts/km/km ${ROOT_MOUNT_DIR}/opt/kontain/bin/km
      chmod +x ${ROOT_MOUNT_DIR}/opt/kontain/bin/km

      cp ${ROOT_MOUNT_DIR}/kontain-artifacts/container-runtime/krun ${ROOT_MOUNT_DIR}/opt/kontain/bin/krun
      chmod +x ${ROOT_MOUNT_DIR}/opt/kontain/bin/krun

      mkdir -p ${ROOT_MOUNT_DIR}/opt/kontain/shim
      cp ${ROOT_MOUNT_DIR}/kontain-artifacts/cloud/k8s/deploy/shim/containerd-shim-krun-v2 ${ROOT_MOUNT_DIR}/opt/kontain/shim/containerd-shim-krun-v2
      chmod +x ${ROOT_MOUNT_DIR}/opt/kontain/shim/containerd-shim-krun-v2
      chroot ${ROOT_MOUNT_DIR} ln -sf /opt/kontain/shim/containerd-shim-krun-v2 /usr/bin/containerd-shim-krun-v2

      chmod +x ${ROOT_MOUNT_DIR}/kontain-artifacts/kkm.run
      chroot ${ROOT_MOUNT_DIR}   /kontain-artifacts/kkm.run -- --force-install
    }


k3s_install_config:
  # in kontain-node-initializer
  CONTAINER_CFG_DIR: /root/var/lib/rancher/k3s/agent/etc/containerd


km_crio_install_config:
  kontain_install_entrypoint: |-
    #!/usr/bin/env bash

    set -x
    set -euo pipefail

    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"

    source /scripts-lib/kontain_install_lib.sh
    install_kontain_artifacts

    echo "Install Kontain Runtime Artifacts (KM & KRUN)"
    echo "Add Kontain Runtime to CRIO configuration"
    cat <<-EOT | tee -a /etc/crio/crio.conf.d/99-kontain-deploy
      [crio.runtime.runtimes.krun]
      runtime_path = "/opt/kontain/bin/krun"
      runtime_type = "oci"
      runtime_root = "/run/krun"
    EOT

    [ -c /root/dev/kvm ] && chmod 666 /root/dev/kvm

    echo "restart crio"
    systemctl daemon-reload
    systemctl restart crio

    sleep infinity
