name: CI for basic examples
on: # push
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install tools
        run: |
          set -xe
          sudo apt-get update
          sudo apt-get install jq
          echo "installing git, other dependencies"

          # install git and python pyenv dependencies
          sudo apt install -y make gcc g++ git zip unzip wget jq curl

          REPO_FOLDER=`pwd`
          # its at /home/runner/work/guide-examples/guide-examples
          echo $REPO_FOLDER
          ls -al

          # install docker
          echo "installing Docker CE"
          sudo apt-get install -y\
              ca-certificates \
              curl \
              gnupg \
              lsb-release

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

          sudo systemctl enable docker
          sudo usermod -aG docker runner
          newgrp docker
          sudo systemctl start docker.service

          # enable and start docker daemon
          echo "service enable and start docker"
          sudo systemctl enable --now docker

          # compose
          echo "installing docker-compose"
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # install node
          echo "installing node 12 or above"
          sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates
          curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
          sudo apt -y install nodejs

          sudo apt install nodejs -y

          # install golang
          echo "installing go"
          sudo apt install -y golang-go

          cat<<EOF >> /home/runner/.bash_profile
          export GOPATH='/home/runner/go'
          export GOROOT='/usr/local/go'
          export PATH="$PATH:/usr/local/bin:$GOROOT/bin:$GOPATH/bin"
          export GO111MODULE="on"
          export GOSUMDB=off
          EOF

          #----------------------------------------
          # using sdkman and pyenv since we will need to keep switching versions for testing
          # # install JDK 11
          # sudo apt install -y openjdk-11-jdk maven

          # # install python3
          # sudo add-apt-repository ppa:deadsnakes/ppa
          # sudo apt update -y
          # sudo apt install python3.9

          #----------------------------------------
          # installing python using pyenv as yum breaks when using yum and update-alternatives
          echo "installing Python 3.9"
          # install dependencies
          sudo apt install -y make build-essential libssl-dev zlib1g-dev \
              libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
              libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git

          # ref: https://www.singlestoneconsulting.com/blog/setting-up-your-python-environment/
          sudo runuser -l runner -c "curl https://pyenv.run | bash"
          sudo runuser -l runner -c "/home/runner/.pyenv/bin/pyenv install 3.9.12"
          sudo runuser -l runner -c "/home/runner/.pyenv/bin/pyenv global 3.9.12"

          cat<<EOF >> /home/runner/.bash_profile
          export PATH="\$HOME/.pyenv/bin:$PATH"
          eval "\$(pyenv init -)"
          eval "\$(pyenv virtualenv-init -)"
          EOF

          sudo runuser -l runner -c echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> /home/runner/.bash_profile
          sudo runuser -l runner -c echo 'eval "$(pyenv init -)"' >> /home/runner/.bash_profile
          sudo runuser -l runner -c echo 'eval "$(pyenv virtualenv-init -)"' >> /home/runner/.bash_profile

          # installing JDK
          echo "installing JDK 11"
          # NOTE - cant use amazon-linux-extras as they default to openjdk-17 or yum - as it installs older version fo maven - HAVE TO USE SDKMAN
          echo "installing sdkman and java"

          sudo runuser  -l runner -c 'curl -s "https://get.sdkman.io" | bash'
          sudo runuser  -l runner -c 'source /home/runner/.sdkman/bin/sdkman-init.sh && sdk install java 11.0.11.hs-adpt && sdk install maven'
          sudo runuser  -l runner -c ''
          cat <<EOF  >> /home/runner/.bash_profile
          #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
          export SDKMAN_DIR="\$HOME/.sdkman"
          [[ -s "\$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "\$HOME/.sdkman/bin/sdkman-init.sh"
          EOF

          #----------------------------------------
          # install kustomize
          sudo curl -Lo /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64
          sudo chmod +x /usr/local/bin/kustomize

          # install kind
          echo "installing kind"
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/

          # utilities
          # install kubectl
          echo "installing kubectl"
          sudo apt-get install -y apt-transport-https ca-certificates curl
          sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
          echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

          sudo apt-get update -y && sudo apt-get install -y kubectl

          # install azure cloud CLI
          echo "installing Azure CLI"
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
          curl -sL https://packages.microsoft.com/keys/microsoft.asc |
              gpg --dearmor |
              sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
              sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update -y
          sudo apt-get install -y azure-cli

          # install KKM
          echo "installing KKM"
          TAG=${1:-$(curl -L -s https://raw.githubusercontent.com/kontainapp/km/current/km-releases/current_release.txt)}
          # forcing it to be latest
          # TAG='latest'
          if [[ $TAG = latest ]] ; then
            readonly URL_KONTAIN_TAR_GZ="https://github.com/kontainapp/km/releases/${TAG}/download/kontain.tar.gz"
            readonly URL_KONTAIN_BIN="https://github.com/kontainapp/km/releases/${TAG}/download/kontain_bin.tar.gz"
          else
            readonly URL_KONTAIN_TAR_GZ="https://github.com/kontainapp/km/releases/download/${TAG}/kontain.tar.gz"
            readonly URL_KONTAIN_BIN="https://github.com/kontainapp/km/releases/download/${TAG}/kontain_bin.tar.gz"
          fi
          readonly PREFIX="/opt/kontain"

          # download and move files into place
          mkdir /tmp/kontain
          cd /tmp/kontain
          wget $URL_KONTAIN_BIN
          tar xvzf kontain_bin.tar.gz

          # move files into /opt/kontain
          mkdir -p /opt/kontain/bin; chown root /opt/kontain
          mv container-runtime/krun /opt/kontain/bin/
          mv km/km /opt/kontain/bin/
          mv bin/docker_config.sh /opt/kontain/bin/

          # install KKM
          ./kkm.run

          # configure and restart docker with Kontain as runtime
          # systemctl restart --no-block docker
          bash /opt/kontain/bin/docker_config.sh
